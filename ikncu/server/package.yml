AWSTemplateFormatVersion: '2010-09-09'
Description: IKNCU
Outputs:
  CameraDynamoDbARN:
    Description: Camera DynamoDB ARN
    Value:
      Fn::GetAtt:
      - CameraTable
      - Arn
  CategoryDynamoDbARN:
    Description: Category DynamoDB ARN
    Value:
      Fn::GetAtt:
      - CategoryTable
      - Arn
  FaceDynamoDbARN:
    Description: Face DynamoDB ARN
    Value:
      Fn::GetAtt:
      - FaceTable
      - Arn
  MotionDynamoDbARN:
    Description: Motion DynamoDB ARN
    Value:
      Fn::GetAtt:
      - MotionTable
      - Arn
  TierDynamoDbARN:
    Description: Tier DynamoDB ARN
    Value:
      Fn::GetAtt:
      - TierTable
      - Arn
  UserDynamoDbARN:
    Description: User DynamoDB ARN
    Value:
      Fn::GetAtt:
      - UserTable
      - Arn
Resources:
  CameraTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: UserId
        AttributeType: S
      - AttributeName: Active
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: gsiCameryByUserActive
        KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Active
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  CategoryTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  CognitoIdPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName:
          Fn::GetAtt:
          - CognitoUserPool
          - ProviderName
      IdentityPoolName:
        Ref: AWS::StackName
    Type: AWS::Cognito::IdentityPool
  CognitoUserPool:
    Properties:
      AutoVerifiedAttributes:
      - email
      UserPoolName: Ikncu
      UsernameAttributes:
      - email
    Type: AWS::Cognito::UserPool
  CognitoUserPoolClient:
    Properties:
      ClientName: IkncuWebApp
      ExplicitAuthFlows:
      - ADMIN_NO_SRP_AUTH
      GenerateSecret: false
      UserPoolId:
        Ref: CognitoUserPool
    Type: AWS::Cognito::UserPoolClient
  FaceTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: UserId
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: gsiFaceByUser
        KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  IkncuAPIFunction:
    Name: IkncuAPILambda
    Properties:
      CodeUri: s3://ikncu-deploy/7ab2e2391efe12c7185a654bac311f4d
      Events:
        CameraByUser:
          Properties:
            Method: GET
            Path: /camera/byuser
            RestApiId:
              Ref: IkncuApi
          Type: Api
        CameraDelete:
          Properties:
            Method: DELETE
            Path: /camera
            RestApiId:
              Ref: IkncuApi
          Type: Api
        CameraGet:
          Properties:
            Method: GET
            Path: /camera
            RestApiId:
              Ref: IkncuApi
          Type: Api
        CameraPost:
          Properties:
            Method: POST
            Path: /camera
            RestApiId:
              Ref: IkncuApi
          Type: Api
        FaceByUser:
          Properties:
            Method: GET
            Path: /face/byuser
            RestApiId:
              Ref: IkncuApi
          Type: Api
        Image:
          Properties:
            Method: POST
            Path: /image
            RestApiId:
              Ref: IkncuApi
          Type: Api
        MotionByCamera:
          Properties:
            Method: GET
            Path: /motion/bycamera
            RestApiId:
              Ref: IkncuApi
          Type: Api
        MotionByUser:
          Properties:
            Method: GET
            Path: /motion/byuser
            RestApiId:
              Ref: IkncuApi
          Type: Api
        RekognitionFaceDelete:
          Properties:
            Method: DELETE
            Path: /rekognition/face
            RestApiId:
              Ref: IkncuApi
          Type: Api
        RekognitionFaceGet:
          Properties:
            Method: GET
            Path: /rekognition/face
            RestApiId:
              Ref: IkncuApi
          Type: Api
        RekognitionFacePost:
          Properties:
            Method: POST
            Path: /rekognition/face
            RestApiId:
              Ref: IkncuApi
          Type: Api
        UserByTier:
          Properties:
            Method: GET
            Path: /user/bytier
            RestApiId:
              Ref: IkncuApi
          Type: Api
        UserDelete:
          Properties:
            Method: DELETE
            Path: /user
            RestApiId:
              Ref: IkncuApi
          Type: Api
        UserGet:
          Properties:
            Method: GET
            Path: /user
            RestApiId:
              Ref: IkncuApi
          Type: Api
        UserPost:
          Properties:
            Method: POST
            Path: /user
            RestApiId:
              Ref: IkncuApi
          Type: Api
      Handler: index.handler
      Policies: AmazonDynamoDBFullAccess
      Role:
        Fn::GetAtt:
        - IkncuLambdaApiRole
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  IkncuApi:
    Properties:
      DefinitionBody:
        basePath: /
        info:
          title: Ikncu
          version: '2017-04-26T03:23:48Z'
        paths:
          /camera:
            delete:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \ \"table\": \"CameraDynamoDbARN\",\r\n \"operation\": \"delete\"\
                    ,\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\"\
                    : \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \ \"table\": \"CameraDynamoDbARN\",\r\n \"operation\": \"read\"\
                    ,\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\"\
                    : \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$')){ \r\n   \
                    \ \"operation\": \"create\",\r\n    \"table\": \"CameraDynamoDbARN\"\
                    ,\r\n    \"payload\": {      \r\n        \"Item\" : {        \
                    \  \r\n            \"Id\" : $input.json('$.Id'),\r\n         \
                    \   \"UserId\" : $input.json('$.UserId'),\r\n            \"Name\"\
                    \ : $input.json('$.Name'),\r\n            \"Active\" :$input.json('$.Active')\r\
                    \n        }\r\n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
          /camera/byuser:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \    \"table\": \"CameraDynamoDbARN\",\r\n    \"operation\": \"\
                    list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"\
                    gsiCameryByUserActive\",\r\n        \"KeyConditionExpression\"\
                    : \"UserId = :hkey and Active = :rkey\",\r\n        \"ExpressionAttributeValues\"\
                    : {\r\n            \":hkey\": \"$input.params('hkey')\",\r\n \
                    \           \":rkey\": \"$input.params('rkey')\"\r\n        }\r\
                    \n    }\r\n}\r\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
          /face/byuser:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \    \"table\": \"FaceDynamoDbARN\",\r\n    \"operation\": \"\
                    list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"\
                    gsiFaceByUser\",\r\n        \"KeyConditionExpression\": \"UserId\
                    \ = :hkey\",\r\n        \"ExpressionAttributeValues\": {\r\n \
                    \           \":hkey\": \"$input.params('hkey')\"\r\n        }\r\
                    \n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
          /image:
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \ \"operation\": \"image\",\r\n \"sourceBucket\": $input.json('SourceBucket'),\
                    \ \r\n \"destinationBucket\": $input.json('DestinationBucket'),\
                    \ \r\n \"sourceFile\": $input.json('$.SourceFile'), \r\n \"destinationFile\"\
                    : $input.json('$.DestinationFile'), \r\n \"width\" : $input.json('$.Width'),\r\
                    \n \"height\" : $input.json('$.Height')\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
          /motion/bycamera:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \    \"table\": \"MotionDynamoDbARN\",\r\n    \"operation\": \"\
                    list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"\
                    gsiMotionByUserOccurred\",\r\n        \"KeyConditionExpression\"\
                    : \"UserId = :hkey and Occurred between :rkey1 and :rkey2\",\r\
                    \n        \"ExpressionAttributeValues\": {\r\n            \":hkey\"\
                    : \"$input.params('hkey')\",\r\n            \":rkey1\": $input.params('rkey1'),\r\
                    \n            \":rkey2\": $input.params('rkey2')\r\n        }\r\
                    \n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
          /motion/byuser:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \    \"table\": \"MotionDynamoDbARN\",\r\n    \"operation\": \"\
                    list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"\
                    gsiMotionByUserOccurred\",\r\n        \"KeyConditionExpression\"\
                    : \"UserId = :hkey and Occurred between :rkey1 and :rkey2\",\r\
                    \n        \"ExpressionAttributeValues\": {\r\n            \":hkey\"\
                    : \"$input.params('hkey')\",\r\n            \":rkey1\": $input.params('rkey1'),\r\
                    \n            \":rkey2\": $input.params('rkey2')\r\n        }\r\
                    \n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
          /rekognition/face:
            delete:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "\r\n#set($inputRoot = $input.path('$'))\r\n{\
                    \ \r\n    \"operation\": \"rekognition\",\r\n    \"method\": \"\
                    DeleteFace\",\r\n    \"payload\":{    \r\n        \"Key\": {\r\
                    \n            \"Id\" : $input.json('$.Id')\r\n        }\r\n  \
                    \  }\r\n}\r\n"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$')){ \r\n   \
                    \ \"operation\": \"rekognition\",\r\n    \"method\": \"GetFace\"\
                    ,\r\n    \"payload\": {      \r\n        \"Item\" : {        \
                    \  \r\n            \"UserId\" : $input.json('$.UserId')\r\n  \
                    \      }\r\n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \    \"operation\": \"rekognition\",\r\n    \"method\": \"AddFace\"\
                    ,\r\n    \"payload\":{    \r\n        \"Key\": {\r\n         \
                    \       \"UserId\" : $input.json('$.UserId'),\r\n            \
                    \    \"Frame\" : $input.json('$.Frame'),\r\n                \"\
                    CategoryId\" : $input.json('$.CategoryId') \r\n        }\r\n \
                    \   }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
          /user:
            delete:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \ \"table\": \"UserDynamoDbARN\",\r\n \"operation\": \"delete\"\
                    ,\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\"\
                    : \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \ \"table\": \"UserDynamoDbARN\",\r\n \"operation\": \"read\"\
                    ,\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\"\
                    : \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$')){ \r\n   \
                    \ \"operation\": \"create\",\r\n    \"table\": \"UserDynamoDbARN\"\
                    ,\r\n    \"payload\": {      \r\n        \"Item\" : {        \
                    \  \r\n            \"Id\" : $input.json('$.id'),\r\n         \
                    \   \"TierId\" : $input.json('$.tierId'),\r\n            \"Name\"\
                    \ : $input.json('$.name'),\r\n            \"Email\" : $input.json('$.email'),\r\
                    \n            \"Labels\": $input.json('$.labels'),\r\n       \
                    \     \"Created\": $input.json('$.created')\r\n        }\r\n \
                    \   }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
          /user/bytier:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \    \"table\": \"UserDynamoDbARN\",\r\n    \"operation\": \"\
                    list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"\
                    gsiUserByTierCreated\",\r\n        \"KeyConditionExpression\"\
                    : \"TierId = :hkey and Created > :rkey\",\r\n        \"ExpressionAttributeValues\"\
                    : {\r\n            \":hkey\": \"$input.params('hkey')\",\r\n \
                    \           \":rkey\": \"$input.params('rkey')\"\r\n        }\r\
                    \n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
        schemes:
        - https
        swagger: '2.0'
      StageName: live
    Type: AWS::Serverless::Api
  IkncuImageFunction:
    FunctionName: ikncu-IkncuImage-Function
    Name: IkncuImageLambda
    Properties:
      CodeUri: s3://ikncu-deploy/7ab2e2391efe12c7185a654bac311f4d
      Handler: image.handler
      Policies: AmazonDynamoDBFullAccess
      Role:
        Fn::GetAtt:
        - IkncuLamdaImageRole
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  IkncuLambdaApiRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - log-group:/aws/lambda/*:*:*
          - Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:dynamodb
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - table/*
          Version: '2012-10-17'
        PolicyName: DynamoDBWriteAccess
    Type: AWS::IAM::Role
  IkncuLamdaImageRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource: arn:aws:s3:::ikncu-mail/*
          Version: '2012-10-17'
        PolicyName: IkncuS3BucketMailAccess
      - PolicyDocument:
          Statement:
          - Action:
            - s3:GetObject
            - s3:PutObject
            Effect: Allow
            Resource:
            - arn:aws:s3:::ikncu-frames/*
          Version: '2012-10-17'
        PolicyName: IkncuS3BucketFramesAccess
      - PolicyDocument:
          Statement:
          - Action:
            - rekognition:DetectLabels
            - rekognition:DetectFaces
            - rekognition:IndexFaces
            - rekognition:CreateCollection
            - ses:SendEmail
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: IkncuRekognitionAccess
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:dynamodb
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - table/*
          Version: '2012-10-17'
        PolicyName: IkncuDynamoDBRekognitionWriteAccess
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - log-group:/aws/lambda/*:*:*
          Version: '2012-10-17'
        PolicyName: IkncuCloudWatchWriteAccess
    Type: AWS::IAM::Role
  LambdaInvokePermission:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - IkncuImageFunction
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: arn:aws:s3:::ikncu-mail
    Type: AWS::Lambda::Permission
  MotionTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: UserId
        AttributeType: S
      - AttributeName: CameraId
        AttributeType: S
      - AttributeName: Occurred
        AttributeType: N
      GlobalSecondaryIndexes:
      - IndexName: gsiMotionByUserOccurred
        KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Occurred
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
      - IndexName: gsiMotionByCameraOccurred
        KeySchema:
        - AttributeName: CameraId
          KeyType: HASH
        - AttributeName: Occurred
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  TierTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  UserTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: TierId
        AttributeType: S
      - AttributeName: Created
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: gsiUserByTierCreated
        KeySchema:
        - AttributeName: TierId
          KeyType: HASH
        - AttributeName: Created
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
Transform: AWS::Serverless-2016-10-31
