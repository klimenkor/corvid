type Tier @model {
  id: ID!
  name: String!
  users: [User] @connection (name: "UserTier" )
}

type Category @model {
  id: ID!
  name: String!
  faces: [Face] @connection (name: "FacesCategory")
}

type User @model {
  id: ID!
  email: String!
  labels: [String],
  tier: Tier @connection (name: "UserTier") #, keyField: "tierId" )
  cameras: [Camera] @connection (name: "UserCameras")
  motions: [Motion] @connection (name: "UserMotions")
  faces: [Face] @connection (name: "UserFaces")
  # tests: [Test] @connection (name: "UserTest")
}

type Camera @model {
  id: ID!
  name: String!
  active: Boolean!
  user: User @connection (name: "UserCameras") #, keyField: "userId")
  motions: [Motion] @connection (name: "CameraMotions")
  # tests: [Test] @connection (name: "CameraTest")
  #userId: ID!
}

type Face @model {
  id: ID!
  name: String!
  active: Boolean!
  category: Category @connection (name: "FacesCategory") #, keyField: "categoryId")
  user: User @connection (name: "UserFaces") #, keyField: "userId")
  # userId: ID!
  # categoryId: ID!
}

type Label {
  name: String,
  confidence:  Float
}

type Motion @model {
  id: ID!
  labels: [Label]
  frame: String!
  occured: String!
  camera: Camera @connection (name: "CameraMotions")#, keyField: "cameraId")
  user: User @connection (name: "UserMotions") #, keyField: "cameraUserId")
  # cameraUserId: String!
  # cameraId: ID!
}

# type Test @model {
#   id: ID!
#   user: User @connection (name: "UserTest", keyField: "userId")
#   camera: Camera @connection (name: "CameraTest", keyField: "cameraId")
#   userId: ID!
#   cameraId: ID!
# }

