type Tier {
  id: ID!
  name: String!
}

type Category {
  id: String!
  name: String!
}

type User {
  id: String!
  email: String!
  labels: [String]
  tier: Tier
  cameras(filter: ModelCameraFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelCameraConnection
  motions(filter: ModelMotionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMotionConnection
  faces(filter: ModelFaceFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelFaceConnection
}

type Camera {
  id: String!
  name: String!
  active: Boolean!
  user: User
  motions(filter: ModelMotionFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelMotionConnection
}

type Face {
  id: String!
  name: String!
  active: Boolean!
  category: Category
  user: User
}

type Label {
  name: String
  confidence: Int
}

type Motion {
  id: ID!
  labels: [Label]
  frame: String!
  occured: String!
  camera: Camera
  user: User
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTierConnection {
  items: [Tier]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelTierFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  and: [ModelTierFilterInput]
  or: [ModelTierFilterInput]
  not: ModelTierFilterInput
}

type Query {
  getTier(id: ID!): Tier
  listTiers(filter: ModelTierFilterInput, limit: Int, nextToken: String): ModelTierConnection
  getCategory(id: ID!): Category
  listCategorys(filter: ModelCategoryFilterInput, limit: Int, nextToken: String): ModelCategoryConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
  getCamera(id: ID!): Camera
  listCameras(filter: ModelCameraFilterInput, limit: Int, nextToken: String): ModelCameraConnection
  getFace(id: ID!): Face
  listFaces(filter: ModelFaceFilterInput, limit: Int, nextToken: String): ModelFaceConnection
  getMotion(id: ID!): Motion
  listMotions(filter: ModelMotionFilterInput, limit: Int, nextToken: String): ModelMotionConnection
}

input CreateTierInput {
  id: ID
  name: String!
}

input UpdateTierInput {
  id: ID!
  name: String
}

input DeleteTierInput {
  id: ID
}

type Mutation {
  createTier(input: CreateTierInput!): Tier
  updateTier(input: UpdateTierInput!): Tier
  deleteTier(input: DeleteTierInput!): Tier
  createCategory(input: CreateCategoryInput!): Category
  updateCategory(input: UpdateCategoryInput!): Category
  deleteCategory(input: DeleteCategoryInput!): Category
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
  createCamera(input: CreateCameraInput!): Camera
  updateCamera(input: UpdateCameraInput!): Camera
  deleteCamera(input: DeleteCameraInput!): Camera
  createFace(input: CreateFaceInput!): Face
  updateFace(input: UpdateFaceInput!): Face
  deleteFace(input: DeleteFaceInput!): Face
  createMotion(input: CreateMotionInput!): Motion
  updateMotion(input: UpdateMotionInput!): Motion
  deleteMotion(input: DeleteMotionInput!): Motion
}

type Subscription {
  onCreateTier: Tier @aws_subscribe(mutations: ["createTier"])
  onUpdateTier: Tier @aws_subscribe(mutations: ["updateTier"])
  onDeleteTier: Tier @aws_subscribe(mutations: ["deleteTier"])
  onCreateCategory: Category @aws_subscribe(mutations: ["createCategory"])
  onUpdateCategory: Category @aws_subscribe(mutations: ["updateCategory"])
  onDeleteCategory: Category @aws_subscribe(mutations: ["deleteCategory"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
  onCreateCamera: Camera @aws_subscribe(mutations: ["createCamera"])
  onUpdateCamera: Camera @aws_subscribe(mutations: ["updateCamera"])
  onDeleteCamera: Camera @aws_subscribe(mutations: ["deleteCamera"])
  onCreateFace: Face @aws_subscribe(mutations: ["createFace"])
  onUpdateFace: Face @aws_subscribe(mutations: ["updateFace"])
  onDeleteFace: Face @aws_subscribe(mutations: ["deleteFace"])
  onCreateMotion: Motion @aws_subscribe(mutations: ["createMotion"])
  onUpdateMotion: Motion @aws_subscribe(mutations: ["updateMotion"])
  onDeleteMotion: Motion @aws_subscribe(mutations: ["deleteMotion"])
}

type ModelCategoryConnection {
  items: [Category]
  nextToken: String
}

input ModelCategoryFilterInput {
  id: ModelStringFilterInput
  name: ModelStringFilterInput
  and: [ModelCategoryFilterInput]
  or: [ModelCategoryFilterInput]
  not: ModelCategoryFilterInput
}

input CreateCategoryInput {
  id: ID
  name: String!
}

input UpdateCategoryInput {
  id: String!
  name: String
}

input DeleteCategoryInput {
  id: ID
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  id: ModelStringFilterInput
  email: ModelStringFilterInput
  labels: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  id: ID
  email: String!
  labels: [String]
  userTierId: ID
}

input UpdateUserInput {
  id: String!
  email: String
  labels: [String]
  userTierId: ID
}

input DeleteUserInput {
  id: ID
}

type ModelCameraConnection {
  items: [Camera]
  nextToken: String
}

input ModelCameraFilterInput {
  id: ModelStringFilterInput
  name: ModelStringFilterInput
  active: ModelBooleanFilterInput
  and: [ModelCameraFilterInput]
  or: [ModelCameraFilterInput]
  not: ModelCameraFilterInput
}

input CreateCameraInput {
  id: ID
  name: String!
  active: Boolean!
  cameraUserId: ID
}

input UpdateCameraInput {
  id: String!
  name: String
  active: Boolean
  cameraUserId: ID
}

input DeleteCameraInput {
  id: ID
}

type ModelFaceConnection {
  items: [Face]
  nextToken: String
}

input ModelFaceFilterInput {
  id: ModelStringFilterInput
  name: ModelStringFilterInput
  active: ModelBooleanFilterInput
  and: [ModelFaceFilterInput]
  or: [ModelFaceFilterInput]
  not: ModelFaceFilterInput
}

input CreateFaceInput {
  id: ID
  name: String!
  active: Boolean!
  faceCategoryId: ID
  faceUserId: ID
}

input UpdateFaceInput {
  id: String!
  name: String
  active: Boolean
  faceCategoryId: ID
  faceUserId: ID
}

input DeleteFaceInput {
  id: ID
}

input LabelInput {
  name: String
  confidence: Int
}

type ModelMotionConnection {
  items: [Motion]
  nextToken: String
}

input ModelMotionFilterInput {
  id: ModelIDFilterInput
  frame: ModelStringFilterInput
  occured: ModelStringFilterInput
  and: [ModelMotionFilterInput]
  or: [ModelMotionFilterInput]
  not: ModelMotionFilterInput
}

input CreateMotionInput {
  id: ID
  labels: [LabelInput]
  frame: String!
  occured: String!
  motionCameraId: ID
  motionUserId: ID
}

input UpdateMotionInput {
  id: ID!
  labels: [LabelInput]
  frame: String
  occured: String
  motionCameraId: ID
  motionUserId: ID
}

input DeleteMotionInput {
  id: ID
}
