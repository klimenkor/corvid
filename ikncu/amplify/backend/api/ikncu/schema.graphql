type Tier @model {
  id: ID!
  name: String!
  users: [User] @connection (name: "UserTier")
}

type Category @model {
  id: ID!
  name: String!
  faces: [Face] @connection (name: "FaceCategory")
}

type User @model {
  id: ID!
  email: String!
  labels: [String],
  tier: Tier @connection (name: "UserTier")
  cameras: [Camera] @connection (name: "UserCamera", keyField: "userId")
  motions: [Motion] @connection (name: "UserMotion", keyField: "userId", sortField: "occurred")
  faces: [Face] @connection (name: "UserFace", keyField: "userId")
}

type Camera @model {
  id: ID!
  name: String!
  active: Boolean!
  userId: ID
  user: User @connection (name: "UserCamera", keyField: "userId")
  motions: [Motion] @connection (name: "CameraMotion", keyField: "cameraId", sortField: "occurred")
}

type Face @model {
  id: ID!
  name: String
  active: Boolean!
  frame: String!
  location: String!
  userId: ID
  categoryId: ID
  category: Category @connection (name: "FaceCategory", keyField: "categoryId")
  user: User @connection (name: "UserFace", keyField: "userId")
}

type Label {
  name: String,
  confidence:  Float
}

type Range {
  high: Float,
  low: Float
}

type Feature {
  confidence: Float,
  value: Boolean
}

type Emotion {
  confidence: Float,
  type: String
}

type Box {
  height: Float,
  left: Float,
  top: Float,
  width: Float
}

type DetectedFace {
  box: Box,
  age: Range,
  beard: Feature,
  confidence: Float,
  emotions: [Emotion],
  eyeglasses: Feature,
  eyesopen: Feature,
  gender: Feature,
  mouthopen: Feature,
  mustache: Feature,
  smile: Feature,
  sunglasses: Feature
}

type Motion @model {
  id: ID!
  labels: [Label]
  frame: String!
  occurred: String! #AWSDateTime
  faces: [DetectedFace]
  userId: ID
  cameraId: ID
  camera: Camera @connection (name: "CameraMotion", keyField: "cameraId")
  user: User @connection (name: "UserMotion", keyField: "userId")
}
