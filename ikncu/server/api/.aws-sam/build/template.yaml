AWSTemplateFormatVersion: '2010-09-09'
Description: IKNCU
Outputs:
  CameraDynamoDbARN:
    Description: Camera DynamoDB ARN
    Value:
      Fn::GetAtt:
      - CameraTable
      - Arn
  CategoryDynamoDbARN:
    Description: Category DynamoDB ARN
    Value:
      Fn::GetAtt:
      - CategoryTable
      - Arn
  FaceDynamoDbARN:
    Description: Face DynamoDB ARN
    Value:
      Fn::GetAtt:
      - FaceTable
      - Arn
  MotionDynamoDbARN:
    Description: Motion DynamoDB ARN
    Value:
      Fn::GetAtt:
      - MotionTable
      - Arn
  TierDynamoDbARN:
    Description: Tier DynamoDB ARN
    Value:
      Fn::GetAtt:
      - TierTable
      - Arn
  UserDynamoDbARN:
    Description: User DynamoDB ARN
    Value:
      Fn::GetAtt:
      - UserTable
      - Arn
Resources:
  CameraTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  CategoryTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  CognitoIdPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName:
          Fn::GetAtt:
          - CognitoUserPool
          - ProviderName
      IdentityPoolName:
        Ref: AWS::StackName
    Type: AWS::Cognito::IdentityPool
  CognitoUserPool:
    Properties:
      AutoVerifiedAttributes:
      - email
      UserPoolName: Ikncu
      UsernameAttributes:
      - email
    Type: AWS::Cognito::UserPool
  CognitoUserPoolClient:
    Properties:
      ClientName: IkncuWebApp
      ExplicitAuthFlows:
      - ADMIN_NO_SRP_AUTH
      GenerateSecret: false
      UserPoolId:
        Ref: CognitoUserPool
    Type: AWS::Cognito::UserPoolClient
  FaceTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  IkncuAPIFunction:
    Name: IkncuAPILambda
    Properties:
      CodeUri: IkncuAPIFunction
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - IkncuLambdaRole
        - Arn
      Runtime: nodejs8.10
    Type: AWS::Serverless::Function
  IkncuApi:
    Properties:
      DefinitionBody:
        basePath: /
        info:
          title: Ikncu
          version: '2017-04-26T03:23:48Z'
        paths:
          /user:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n\
                    \ \"table\": \"UserDynamoDbARN\",\r\n \"operation\": \"read\"\
                    ,\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\"\
                    : \"$input.params('Id')\"\r\n        }\r\n    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$')){ \r\n   \
                    \ \"operation\": \"create\",\r\n    \"table\": \"UserDynamoDbARN\"\
                    ,\r\n    \"payload\": {      \r\n        \"Item\" : {        \
                    \  \r\n            \"Id\" : \"$inputRoot.id\",\r\n           \
                    \ \"TierId\" : \"$inputRoot.tierId\",\r\n            \"Name\"\
                    \ : \"$inputRoot.name\",\r\n            \"Email\" : \"$inputRoot.email\"\
                    ,\r\n            \"Labels\": $inputRoot.labels\r\n        }\r\n\
                    \    }\r\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
        schemes:
        - https
        swagger: '2.0'
      StageName: live
    Type: AWS::Serverless::Api
  IkncuLambdaRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:logs
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - log-group:/aws/lambda/*:*:*
          - Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:Query
            - dynamodb:UpdateItem
            Effect: Allow
            Resource:
            - Fn::Join:
              - ':'
              - - arn:aws:dynamodb
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - table/*
          Version: '2012-10-17'
        PolicyName: DynamoDBWriteAccess
    Type: AWS::IAM::Role
  MotionTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  TierTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
  UserTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: Id
        AttributeType: S
      - AttributeName: TierId
        AttributeType: S
      GlobalSecondaryIndexes:
      - IndexName: gsiTier
        KeySchema:
        - AttributeName: TierId
          KeyType: HASH
        Projection:
          ProjectionType: KEYS_ONLY
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'
      KeySchema:
      - AttributeName: Id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
    Type: AWS::DynamoDB::Table
Transform: AWS::Serverless-2016-10-31
