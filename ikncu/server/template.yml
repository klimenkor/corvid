# StackName: ikncu
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: IKNCU
Resources:

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: Ikncu
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: IkncuWebApp
      GenerateSecret: false
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      UserPoolId: !Ref CognitoUserPool
        
  CognitoIdPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Ref AWS::StackName
      CognitoIdentityProviders:
        -
          ClientId: !Ref CognitoUserPoolClient
          ProviderName: !GetAtt CognitoUserPool.ProviderName
      AllowUnauthenticatedIdentities: false          

  IkncuLambdaApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - 
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - 
          PolicyName: DynamoDBWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Join [ ":", ["arn:aws:logs",!Ref "AWS::Region",!Ref "AWS::AccountId","log-group:/aws/lambda/*:*:*"]]
              - 
                Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:DeleteItem
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource: 
                  - !Join [ ":", ["arn:aws:dynamodb",!Ref "AWS::Region",!Ref "AWS::AccountId","table/*"]]
        - 
          PolicyName: IkncuRekognitionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Action: 
                  - "rekognition:DetectFaces"
                  - "rekognition:DeleteFaces"
                  - "rekognition:IndexFaces"
                  - "rekognition:ListFaces"
                  - "rekognition:CreateCollection"
                Resource: "*"

        - 
          PolicyName: IkncuS3BucketFacesAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action: 
                  - "s3:GetObject"
                Resource: 
                  - "arn:aws:s3:::ikncu-faces/*"                


  IkncuLamdaDispatcherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - 
          PolicyName: IkncuS3BucketMailAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::ikncu-mail/*"
        - 
          PolicyName: IkncuS3BucketFramesAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action: 
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: 
                  - "arn:aws:s3:::ikncu-frames/*"
                  - "arn:aws:s3:::ikncu-faces/*"
        - 
          PolicyName: IkncuRekognitionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Action: 
                  - "rekognition:DetectLabels"
                  - "rekognition:DetectFaces"
                  - "ses:SendEmail"
                Resource: "*"
        - 
          PolicyName: IkncuDynamoDBRekognitionWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Action: 
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"  
                  - "dynamodb:Scan"  
                Resource: 
                  - !Join [ ":", ["arn:aws:dynamodb",!Ref "AWS::Region",!Ref "AWS::AccountId","table/*"]]
        - 
          PolicyName: IkncuCloudWatchWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Join [ ":", ["arn:aws:logs",!Ref "AWS::Region",!Ref "AWS::AccountId","log-group:/aws/lambda/*:*:*"]]

  IkncuLamdaFaceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - 
          PolicyName: IkncuS3BucketFaceAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::ikncu-faces/*"
        - 
          PolicyName: IkncuRekognitionAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Action: 
                  - "rekognition:SearchFacesByImage"
                  - "ses:SendEmail"
                Resource: "*"
        - 
          PolicyName: IkncuDynamoDBRekognitionWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Action: 
                  - "dynamodb:PutItem"
                  - "dynamodb:GetItem"  
                  - "dynamodb:Scan"  
                Resource: 
                  - !Join [ ":", ["arn:aws:dynamodb",!Ref "AWS::Region",!Ref "AWS::AccountId","table/*"]]
        - 
          PolicyName: IkncuCloudWatchWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !Join [ ":", ["arn:aws:logs",!Ref "AWS::Region",!Ref "AWS::AccountId","log-group:/aws/lambda/*:*:*"]]
  # S3BucketIkncu:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     AccessControl: PublicRead
  #     BucketName: public-bucket
  #     MetricsConfigurations: 
  #       - Id: EntireBucket
  #     WebsiteConfiguration:
  #       IndexDocument: index.html
  #       ErrorDocument: error.html
  #       RoutingRules:
  #       - RoutingRuleCondition:
  #           HttpErrorCodeReturnedEquals: '404'
  #           KeyPrefixEquals: out1/
  #         RedirectRule:
  #           HostName: ikncu.com
  #           ReplaceKeyPrefixWith: report-404/
  #   DeletionPolicy: Retain

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: TierId
          AttributeType: S
        - AttributeName: Created
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1      
      GlobalSecondaryIndexes:
      - IndexName: gsiUserByTierCreated
        KeySchema:
        - AttributeName: TierId
          KeyType: HASH
        - AttributeName: Created
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'

  TierTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1      

  CameraTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: Active
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1      
      GlobalSecondaryIndexes:
      - IndexName: gsiCameryByUserActive
        KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Active
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'

  FaceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1      
      GlobalSecondaryIndexes:
      - IndexName: gsiFaceByUser
        KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1        

  CategoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1      

  MotionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: UserId
          AttributeType: S
        - AttributeName: CameraId
          AttributeType: S
        - AttributeName: Occurred
          AttributeType: N
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1    
      GlobalSecondaryIndexes:
      - IndexName: gsiMotionByUserOccurred
        KeySchema:
        - AttributeName: UserId
          KeyType: HASH
        - AttributeName: Occurred
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'        
      - IndexName: gsiMotionByCameraOccurred
        KeySchema:
        - AttributeName: CameraId
          KeyType: HASH
        - AttributeName: Occurred
          KeyType: RANGE
        Projection:
          ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: '1'
          WriteCapacityUnits: '1'        


  IkncuApi:
    Type: AWS::Serverless::Api
    Properties:
        StageName: live
        DefinitionBody:
            swagger: "2.0"
            info:
              version: "2017-04-26T03:23:48Z"
              title: "Ikncu"
            basePath: "/"
            schemes:
            - "https"
            paths:

              ######################################### image
              /image:
                post:                 ################## POST
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n \"operation\": \"image\",\r\n \"sourceBucket\": $input.json('SourceBucket'), \r\n \"destinationBucket\": $input.json('DestinationBucket'), \r\n \"sourceFile\": $input.json('$.SourceFile'), \r\n \"destinationFile\": $input.json('$.DestinationFile'), \r\n \"width\" : $input.json('$.Width'),\r\n \"height\" : $input.json('$.Height')\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"     
                      
              ######################################### USER
              /user/bytier:
                get:                 ################## GET BY TIER
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n    \"table\": \"UserDynamoDbARN\",\r\n    \"operation\": \"list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"gsiUserByTierCreated\",\r\n        \"KeyConditionExpression\": \"TierId = :hkey and Created > :rkey\",\r\n        \"ExpressionAttributeValues\": {\r\n            \":hkey\": \"$input.params('hkey')\",\r\n            \":rkey\": \"$input.params('rkey')\"\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

              /user:
                get:                 ################## GET
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n \"table\": \"UserDynamoDbARN\",\r\n \"operation\": \"read\",\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\": \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                delete:                 ################## DELETE
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n \"table\": \"UserDynamoDbARN\",\r\n \"operation\": \"delete\",\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\": \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                post:           ################## POST
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$')){ \r\n    \"operation\": \"create\",\r\n    \"table\": \"UserDynamoDbARN\",\r\n    \"payload\": {      \r\n        \"Item\" : {          \r\n            \"Id\" : $input.json('$.id'),\r\n            \"TierId\" : $input.json('$.tierId'),\r\n            \"Name\" : $input.json('$.name'),\r\n            \"Email\" : $input.json('$.email'),\r\n            \"Labels\": $input.json('$.labels'),\r\n            \"Created\": $input.json('$.created')\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"

              ######################################### CAMERA
              /camera/byuser:
                get:                 ################## GET
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n    \"table\": \"CameraDynamoDbARN\",\r\n    \"operation\": \"list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"gsiCameryByUserActive\",\r\n        \"KeyConditionExpression\": \"UserId = :hkey and Active = :rkey\",\r\n        \"ExpressionAttributeValues\": {\r\n            \":hkey\": \"$input.params('hkey')\",\r\n            \":rkey\": \"$input.params('rkey')\"\r\n        }\r\n    }\r\n}\r\n"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"     
                       
              /camera:
                get:                 ################## GET
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n \"table\": \"CameraDynamoDbARN\",\r\n \"operation\": \"read\",\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\": \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                delete:                 ################## DELETE
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n \"table\": \"CameraDynamoDbARN\",\r\n \"operation\": \"delete\",\r\n \"payload\":{    \r\n    \"Key\": {\r\n            \"Id\": \"$input.params('id')\"\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                post:           ################## POST
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$')){ \r\n    \"operation\": \"create\",\r\n    \"table\": \"CameraDynamoDbARN\",\r\n    \"payload\": {      \r\n        \"Item\" : {          \r\n            \"Id\" : $input.json('$.Id'),\r\n            \"UserId\" : $input.json('$.UserId'),\r\n            \"Name\" : $input.json('$.Name'),\r\n            \"Active\" :$input.json('$.Active')\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"

              ######################################### MOTION
              /motion/byuser:
                get:                 ################## GET BY USER
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n    \"table\": \"MotionDynamoDbARN\",\r\n    \"operation\": \"list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"gsiMotionByUserOccurred\",\r\n        \"KeyConditionExpression\": \"UserId = :hkey and Occurred between :rkey1 and :rkey2\",\r\n        \"ExpressionAttributeValues\": {\r\n            \":hkey\": \"$input.params('hkey')\",\r\n            \":rkey1\": $input.params('rkey1'),\r\n            \":rkey2\": $input.params('rkey2')\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"                    

              /motion/bycamera:
                get:                 ################## GET BY CAMERA
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n    \"table\": \"MotionDynamoDbARN\",\r\n    \"operation\": \"list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"gsiMotionByUserOccurred\",\r\n        \"KeyConditionExpression\": \"UserId = :hkey and Occurred between :rkey1 and :rkey2\",\r\n        \"ExpressionAttributeValues\": {\r\n            \":hkey\": \"$input.params('hkey')\",\r\n            \":rkey1\": $input.params('rkey1'),\r\n            \":rkey2\": $input.params('rkey2')\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"   

              ######################################### FACE
              /face/byuser:
                get:                 ################## GET BY USER
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n    \"table\": \"FaceDynamoDbARN\",\r\n    \"operation\": \"list\",\r\n    \"payload\": {    \r\n        \"IndexName\": \"gsiFaceByUser\",\r\n        \"KeyConditionExpression\": \"UserId = :hkey\",\r\n        \"ExpressionAttributeValues\": {\r\n            \":hkey\": \"$input.params('hkey')\"\r\n        }\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"
                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"  

              ######################################### REKOGNITION
              /rekognition/face:
                get:                 ################## GET
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$')){ \r\n    \"operation\": \"rekognition\",\r\n    \"method\": \"GetFace\",\r\n    \"payload\": {      \r\n        \"UserId\" : \"$input.params('UserId')\",\r\n        \"MaxResults\" : \"$input.params('MaxResults')\"\r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"     
                       
                delete:                 ################## DELETE
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n    \"operation\": \"rekognition\",\r\n    \"method\": \"DeleteFace\",\r\n    \"payload\":{    \r\n        \"UserId\" : \"$input.params('UserId')\"\r\n        \"FaceId\" : \"$input.params('FaceId')\"\r\n    }\r\n}\r\n"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                post:           ################## POST
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                  security:
                  - sigv4: []
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "#set($inputRoot = $input.path('$'))\r\n{ \r\n    \"operation\": \"rekognition\",\r\n    \"method\": \"AddFace\",\r\n    \"payload\":{    \r\n        \"UserId\" : $input.json('$.UserId'),\r\n        \"Frame\" : $input.json('$.Frame'),\r\n        \"Name\" : $input.json('$.Name'),\r\n        \"CategoryId\" : $input.json('$.CategoryId') \r\n    }\r\n}"
                    uri:
                      Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IkncuAPIFunction.Arn}/invocations
                    passthroughBehavior: "when_no_templates"
                    httpMethod: "POST"
                    contentHandling: "CONVERT_TO_TEXT"
                    type: "aws"

                options:
                  consumes:
                  - "application/json"
                  produces:
                  - "application/json"
                  responses:
                    "200":
                      description: "200 response"
                      schema:
                        $ref: "#/definitions/Empty"
                      headers:
                        Access-Control-Allow-Origin:
                          type: "string"
                        Access-Control-Allow-Methods:
                          type: "string"
                        Access-Control-Allow-Headers:
                          type: "string"
                  x-amazon-apigateway-integration:
                    responses:
                      default:
                        statusCode: "200"
                        responseParameters:
                          method.response.header.Access-Control-Allow-Methods: "'POST,GET,OPTIONS'"
                          method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                          method.response.header.Access-Control-Allow-Origin: "'*'"
                    requestTemplates:
                      application/json: "{\"statusCode\": 200}"
                    passthroughBehavior: "when_no_match"
                    type: "mock"

  IkncuDispatcherFunction:
    Type: AWS::Serverless::Function
    Name: 'IkncuDispatcherLambda'
    FunctionName: 'ikncu-IkncuDispatcher-Function'
    Properties:
      Handler: dispatcher.handler
      Runtime: nodejs8.10
      Role: !GetAtt IkncuLamdaDispatcherRole.Arn
      Policies: AmazonDynamoDBFullAccess
      Timeout: 15
      MemorySize: 512

  IkncuFaceFunction:
    Type: AWS::Serverless::Function
    Name: 'IkncuFaceLambda'
    FunctionName: 'ikncu-IkncuFace-Function'
    Properties:
      Handler: face.handler
      Runtime: nodejs8.10
      Role: !GetAtt IkncuLamdaFaceRole.Arn
      Policies: AmazonDynamoDBFullAccess
      Timeout: 15
      MemorySize: 512

  LambdaInvokeFacePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - IkncuFaceFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: "arn:aws:s3:::ikncu-faces"

  LambdaInvokeDispatcherPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - IkncuDispatcherFunction
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: "arn:aws:s3:::ikncu-mail"

  IkncuAPIFunction:
    Type: AWS::Serverless::Function
    Name: 'IkncuAPILambda'
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      Role: !GetAtt IkncuLambdaApiRole.Arn
      Policies: AmazonDynamoDBFullAccess
      Events:
        Image:
          Type: Api
          Properties:
            Path: /image
            Method: POST
            RestApiId:
                Ref: IkncuApi
        UserByTier:
          Type: Api
          Properties:
            Path: /user/bytier
            Method: GET
            RestApiId:
                Ref: IkncuApi
        UserGet:
          Type: Api
          Properties:
            Path: /user
            Method: GET
            RestApiId:
                Ref: IkncuApi
        UserPost:
          Type: Api
          Properties:
            Path: /user
            Method: POST
            RestApiId:
                Ref: IkncuApi                
        UserDelete:
          Type: Api
          Properties:
            Path: /user
            Method: DELETE
            RestApiId:
                Ref: IkncuApi
        CameraPost:
          Type: Api
          Properties:
            Path: /camera
            Method: POST
            RestApiId:
                Ref: IkncuApi                
        CameraByUser:
          Type: Api
          Properties:
            Path: /camera/byuser
            Method: GET
            RestApiId:
                Ref: IkncuApi                
        CameraGet:
          Type: Api
          Properties:
            Path: /camera
            Method: GET
            RestApiId:
                Ref: IkncuApi                
        CameraDelete:
          Type: Api
          Properties:
            Path: /camera
            Method: DELETE
            RestApiId:
                Ref: IkncuApi    
        MotionByUser:
          Type: Api
          Properties:
            Path: /motion/byuser
            Method: GET
            RestApiId:
                Ref: IkncuApi    
        MotionByCamera:
          Type: Api
          Properties:
            Path: /motion/bycamera
            Method: GET
            RestApiId:
                Ref: IkncuApi    
        FaceByUser:
          Type: Api
          Properties:
            Path: /face/byuser
            Method: GET
            RestApiId:
                Ref: IkncuApi       
        RekognitionFacePost:
          Type: Api
          Properties:
            Path: /rekognition/face
            Method: POST
            RestApiId:
                Ref: IkncuApi                
        RekognitionFaceGet:
          Type: Api
          Properties:
            Path: /rekognition/face
            Method: GET
            RestApiId:
                Ref: IkncuApi                
        RekognitionFaceDelete:
          Type: Api
          Properties:
            Path: /rekognition/face
            Method: DELETE
            RestApiId:
                Ref: IkncuApi                           

Outputs:

  UserDynamoDbARN:
    Description: "User DynamoDB ARN"
    Value: 
      !GetAtt UserTable.Arn

  TierDynamoDbARN:
    Description: "Tier DynamoDB ARN"
    Value: 
      !GetAtt TierTable.Arn

  CameraDynamoDbARN:
    Description: "Camera DynamoDB ARN"
    Value: 
      !GetAtt CameraTable.Arn

  MotionDynamoDbARN:
    Description: "Motion DynamoDB ARN"
    Value: 
      !GetAtt MotionTable.Arn 

  CategoryDynamoDbARN:
    Description: "Category DynamoDB ARN"
    Value: 
      !GetAtt CategoryTable.Arn

  FaceDynamoDbARN:
    Description: "Face DynamoDB ARN"
    Value: 
      !GetAtt FaceTable.Arn
